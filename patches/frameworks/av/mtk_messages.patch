From 7f4ac77410edbacdc189f3e36aaf35ac7e0564af Mon Sep 17 00:00:00 2001
From: Ricardo Cerqueira <ricardo@cyngn.com>
Date: Sun, 10 Jun 2018 21:18:38 +0200
Subject: [PATCH] camera: Add support for mediatek cameras

Ported and cleaned up for LineageOS 13 by @Dinolek
---
 .../camera/libcameraservice/api1/CameraClient.cpp  | 45 ++++++++++++++++++++++
 1 file changed, 45 insertions(+)

diff --git a/services/camera/libcameraservice/api1/CameraClient.cpp b/services/camera/libcameraservice/api1/CameraClient.cpp
index af46d63..3794598 100644
--- a/services/camera/libcameraservice/api1/CameraClient.cpp
+++ b/services/camera/libcameraservice/api1/CameraClient.cpp
@@ -29,6 +29,13 @@ namespace android {
 #define LOG1(...) ALOGD_IF(gLogLevel >= 1, __VA_ARGS__);
 #define LOG2(...) ALOGD_IF(gLogLevel >= 2, __VA_ARGS__);
 
+#ifdef MTK_HARDWARE
+enum {
+    MTK_CAMERA_MSG_EXT_NOTIFY = 0x40000000,
+    MTK_CAMERA_MSG_EXT_DATA = 0x80000000
+};
+#endif
+
 static int getCallingPid() {
     return IPCThreadState::self()->getCallingPid();
 }
@@ -95,6 +102,10 @@ status_t CameraClient::initialize(CameraModule *module) {
     enableMsgType(CAMERA_MSG_ERROR | CAMERA_MSG_ZOOM | CAMERA_MSG_FOCUS |
                   CAMERA_MSG_PREVIEW_METADATA | CAMERA_MSG_FOCUS_MOVE);
 
+#ifdef MTK_HARDWARE
+    enableMsgType(MTK_CAMERA_MSG_EXT_NOTIFY | MTK_CAMERA_MSG_EXT_DATA);
+#endif
+
     LOG1("CameraClient::initialize X (pid %d, id %d)", callingPid, mCameraId);
     return OK;
 }
@@ -747,6 +758,15 @@ void CameraClient::notifyCallback(int32_t msgType, int32_t ext1,
 
     if (!client->lockIfMessageWanted(msgType)) return;
 
+#ifdef MTK_HARDWARE
+    if (msgType == MTK_CAMERA_MSG_EXT_NOTIFY) {
+        if (ext1 == 0x10) // MTK_CAMERA_MSG_EXT_CAPTURE_DONE
+            return;
+        if (ext1 == 0x11) // MTK_CAMERA_MSG_EXT_NOTIFY_SHUTTER
+            msgType = CAMERA_MSG_SHUTTER;
+    }
+#endif
+
     switch (msgType) {
         case CAMERA_MSG_SHUTTER:
             // ext1 is the dimension of the yuv picture.
@@ -772,6 +792,31 @@ void CameraClient::dataCallback(int32_t msgType,
         return;
     }
 
+
+#ifdef MTK_HARDWARE
+    if ((msgType & MTK_CAMERA_MSG_EXT_DATA) != 0) {
+        struct DataHeader {
+            uint32_t extMsgType;
+        } dataHeader;
+        ssize_t offset;
+        size_t size;
+        if (dataPtr != 0) {
+            sp<IMemoryHeap> heap = dataPtr->getMemory(&offset, &size);
+            if (heap->base())
+                ::memcpy(&dataHeader, ((uint8_t*)heap->base()) + offset, sizeof(DataHeader));
+
+            if (dataHeader.extMsgType == 0x10) { // MTK_CAMERA_MSG_EXT_DATA_COMPRESSED_IMAGE
+                msgType = CAMERA_MSG_COMPRESSED_IMAGE;
+                sp<MemoryBase> image = new MemoryBase(heap,
+                        (offset + sizeof(DataHeader) + sizeof(uint_t)),
+                        (size - sizeof(DataHeader) - sizeof(uint_t)));
+                client->handleCompressedPicture(image);
+                return;
+            }
+        }
+    }
+#endif
+
     switch (msgType & ~CAMERA_MSG_PREVIEW_METADATA) {
         case CAMERA_MSG_PREVIEW_FRAME:
             client->handlePreviewData(msgType, dataPtr, metadata);
-- 
2.7.4

